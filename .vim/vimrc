"TODO ?
"sheerun/vimrc instead of vim-sensible
"'Shougo/vimfiler.vim' and see https://gitlab.com/snippets/25691 for config
"viki, vim outliner
"haskell (from https://haskell-at-work.com/about.html#faq):
"   neoformat + hindent (or brittany) + stylish-haskell
"   intero-neovim
"php
"   tobyS/pdv (php documentor for vim)
"autres:
"   vim-snipmate (ou ultiSnips ?), nerdcommenter
"   youcompleteme + ultisnips (with supertabs already installed) Or keep and configure deoplete ?
"   neomake (avec ou à la place de Syntastic ?)
"s'inspirer de https://github.com/rafi/vim-config
let mapleader = "," " Redéfinit la touche <Leader> à ',' au lieu de '\'
let g:mapleader = "," " Redéfinit la touche <Leader> à ',' au lieu de '\'
let maplocalleader = "_" " Redéfinit la touche <LocalLeader> à '_'
let loaded_matchparen = 1 "prevent the disturbing highlighting of the matched {([ ])}
if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif
endif

" Required:
call plug#begin(expand('~/.vim/bundle'))

" Add or remove your Bundles here:
Plug 'Shougo/vimproc.vim', { 'do' : 'make' }
Plug 'tpope/vim-sensible' "Defaults everyone can agree on

"--------- File navigation
Plug 'mhinz/vim-startify' " Fancy start screen with links to recent files
" Plug 'scrooloose/nerdtree' "disabled because it overrides netrw when using '-' and don't go upper the initial directory
" Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " Colors for NERDTree => too slow
let NERDTreeChDirMode=2 " change current directory when setting new root directory
Plug 'dhruvasagar/vim-vinegar' "vinegar NERDTree version
" Plug 'tpope/vim-vinegar' " netrw shortcuts : - to jump from a buffer to its directory, etc.

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " fuzzy finder
Plug 'junegunn/fzf.vim'

"--------- Layout and style
Plug 'wesQ3/vim-windowswap' "swap windows: <leader>ww (1st time on 1st window, 2nd time on 2nd window)
Plug 'moll/vim-bbye' " :Bdelete and :Bwipeout quit buffers nicely without destroying windows
Plug 'vim-airline/vim-airline'
Plug 'edkolev/tmuxline.vim'
Plug 'vim-scripts/wombat256.vim' " Wombat Color scheme
" Plug 'rakr/vim-one' " Vim-one Color scheme
Plug 'ryanoasis/vim-devicons' " Dev fonts (icons for status bars and file explorers)

"--------- Text navigation
Plug 'nelstrom/vim-visual-star-search'
Plug 'vim-scripts/utl.vim' "add clickable links on urls / images
Plug 'haya14busa/incsearch.vim' " enhanced incremental searching 

"--------- Text manipulation
Plug 'brooth/far.vim' " Find and replace in multiple files
Plug 'tpope/vim-surround' "easily delete, change and add such surroundings in pairs
Plug 'chrisbra/NrrwRgn' " :NR focus on a selected region while making the rest inaccessible
Plug 'terryma/vim-multiple-cursors' "Like SublimeText multisection 
Plug 'maxbrunsfeld/vim-yankstack' "Navigate the history of yanks with <alt-p> and <alt-shift-p>
Plug 'mbbill/undotree' " :UndotreeToggle
Plug 'godlygeek/tabular' " :Tabularize /<delimiter> (must be before vim-markdown)
Plug 'mattn/emmet-vim' "Expand CSS selectors expression to HTML (ie div#page>div.logo+ul#navigation>li*5>a)
Plug 'michaeljsmith/vim-indent-object' " Text object based on indentation : ai, ii, aI, iI
Plug 'kana/vim-textobj-user' " custom text objects (required by ghci.vim)

"--------- General coding support
Plug 'tomtom/tcomment_vim'
Plug 'scrooloose/syntastic' "Check code syntax
Plug 'joonty/vdebug' " Debugger (:help vdebug) XXX Ne marche pas ?  
Plug 'majutsushi/tagbar' " functions and variables list
Plug 'vim-scripts/IndentAnything'
Plug 'nathanaelkane/vim-indent-guides' " <leader>ig : colorize indentation

"Git 
Plug 'vim-scripts/gitignore'
Plug 'mattn/gist-vim' "Post to gist :Gist 
Plug 'tpope/vim-fugitive' " required by gv
Plug 'junegunn/gv.vim' "commit browser :GV, :GV! (current file), :GV? (fills location list), visual mode (current lines)
Plug 'airblade/vim-gitgutter' " Add signs on the gutter for lines modified
let g:gitgutter_max_signs=999

"Completion
Plug 'jiangmiao/auto-pairs' " deals intelligently with pairs of punctuation () [] '' {} ... 
" Plug 'kana/vim-smartinput' " deals intelligently with pairs of punctuation () [] '' {} ... 
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } "nécessite support python
  let g:deoplete#enable_at_startup = 1 " Use deoplete.
  Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' } " javascript completion
  Plug 'Shougo/neco-vim', { 'for': 'vim' }
  Plug 'zchee/deoplete-jedi', { 'for': 'python' }
  Plug 'sebastianmarkow/deoplete-rust', {'for': ' rust '}
else 
  Plug 'vim-scripts/AutoComplPop' " Open completion popup automatically
endif
Plug 'metalelf0/supertab' " completion with tab (fork of ervandew/supertab to fix 'Invalid argument: pumvisible')
Plug 'lvht/phpcd.vim', { 'for': 'php', 'do': 'composer install' }

Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'

Plug 'sjl/splice.vim' " three way merge

Plug 'sheerun/vim-polyglot' " syntax highlighting, indentation for a wide collection of languages

"Specific languages support not already in vim-polyglot
Plug 'heavenshell/vim-jsdoc'
Plug 'othree/yajs.vim',{'for':'javascript'}
Plug 'gavocanov/vim-js-indent' "works well whith yajs.vim
Plug 'vim-scripts/indenthtml.vim'
Plug 'Quramy/tsuquyomi', {'for': 'typescript' } "TypeScript
Plug 'FrigoEU/psc-ide-vim' " interface to purescript IDE
Plug 'timonv/vim-cargo', { 'for': 'rust' }
Plug 'mmai/vim-markdown-wiki'
" Haskell
Plug 'eagletmt/ghcmod-vim' " required by neco-ghc
Plug 'eagletmt/neco-ghc' " haskell completion 
Plug 'Twinside/vim-hoogle' " Access hoogle search 
Plug 'isovector/ghci.vim' " Tight integration between ghci and vim via tmux

"--------- Applications
"Plug 'blindFS/vim-taskwarrior' "task manager
Plug 'hsitz/VimOrganizer'
Plug 'tpope/vim-speeddating'
Plug 'mattn/webapi-vim' " interface to web APIs
Plug 'mmai/vim-scrum-markdown'
" Plug 'mmai/wikilink'
" Plug 'mmai/vim-zenmode'
Plug 'mikewest/vimroom'
let g:zenmode_background = "dark"
let g:zenmode_colorscheme = "desert"
" let g:zenmode_font ="Cousine 12"
let g:zenmode_font ="Cousine Nerd Font 12"
let g:zenmode_spell ="fr" "correction orthographique

" Tmux
Plug 'xaviershay/tslime.vim' " send text to tmux
Plug 'christoomey/vim-tmux-navigator' " Allow pane movement to jump out of vim into tmux

" En test
Plug 'reedes/vim-pencil' "vim for writers (TooglePencil) : line wrap, undo/redo by sentences, hide markdown formating chars..

" Required:
call plug#end()

" Required:
filetype plugin indent on

set background=dark
"colorscheme solarized
colorscheme desert

" indent guides colors (colorize indentations)
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4


" {{{ From haskell-vim-now
" Use par for prettier line formatting
set formatprg="PARINIT='rTbgqR B=.,?_A_a Q=_s>|' par\ -w72"

" Use stylish haskell instead of par for haskell buffers
autocmd FileType haskell let &formatprg="stylish-haskell"

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif
try
  colorscheme wombat256mod
  " colorscheme one
catch
endtry

" Adjust signscolumn and syntastic to match wombat
hi! link SignColumn LineNr
hi! link SyntasticErrorSign ErrorMsg
hi! link SyntasticWarningSign WarningMsg

" Search 
"   Use pleasant but very visible search hilighting 
hi Search ctermfg=white ctermbg=173 cterm=none guifg=#ffffff guibg=#e5786d gui=none
hi! link Visual Search
let g:incsearch#auto_nohlsearch = 1
"   Config incsearch plugin shortcuts
set hlsearch
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Match wombat colors in nerd tree
hi Directory guifg=#8ac6f2

" Searing red very visible cursor
hi Cursor guibg=red

" Use same color behind concealed unicode characters
hi clear Conceal

" Don't blink normal mode cursor
set guicursor=n-v-c:block-Cursor
set guicursor+=n-v-c:blinkon0
" Set extra options when running in GUI mode
if has("gui_running")
  set guioptions-=T
  set guioptions-=e
  set guitablabel=%M\ %t
endif
set t_Co=256

" Fuzzy-find with fzf
let $FZF_DEFAULT_COMMAND = 'fd --type f'
let $FZF_CTRL_T_COMMAND  = 'fd --type f'
let g:fzf_layout = { 'down': '~40%' }
map <C-p> :Files<cr>
nmap <C-p> :Files<cr>
" View commits in fzf
nmap <Leader>c :Commits<cr>
" Complete from open tmux panes (from @junegunn)
inoremap <expr> <C-x><C-t> fzf#complete( 'tmuxwords.rb -all-but-current --scroll 499 --min 5')
inoremap <expr> <C-x><C-k> fzf#complete ('cat /usr/share/dict/words')
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)
" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" ------------ Coding config

map <leader>tt :TagbarToggle<CR>
set tags=./tags;tags;/,codex.tags;/ " Recherche le fichier tags (man ctags)  dans le répertoire du fichier
                  " courant puis dans le répertoire parent, etc.
                " Penser à exécuter `ctags -R -h ''.php''` dans le repertoire de base des
                " fichiers à analyser (ajouter --exclude=*.js s'il y a des
                " messages d'erreur liés aux fichiers javascript)

" conceal markers
" if has('conceal')
"   set conceallevel=2
" endif

" deoplete + neosnippet + autopairs changes
let g:AutoPairsMapCR=0
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
imap <expr><TAB> pumvisible() ? "\<C-n>" : (neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>")
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
imap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\<CR>\<Plug>AutoPairsReturn"

let g:neosnippet#enable_completed_snippet = 1

let g:phpcd_disable_modifier=0 "PHP (phpcd) utilisation avec neosnippet

"Syntastic
" IDE command : enable syntastic,...
nnoremap <leader>ide :SyntasticToggleMode<cr>  
let g:syntastic_always_populate_loc_list=1 "populate location-list with errors : navigate with :lne :lpr
let g:syntastic_mode_map= {"mode": "active", "active_filetypes":[], "passive_filetypes": []} " enable syntastic by default (call SyntasticToggleMode to disable)
"         PHP 
"let g:syntastic_phpmd_disable=1 "disable phpmd (php mess detector) syntax checking
let g:syntastic_phpcs_disable=1 "disable phpcs (coding standards) syntax checking


let g:syntastic_javascript_checkers=['eslint'] 

"         Haskell > Pretty unicode haskell symbols
let g:haskell_conceal_wide = 1
let g:haskell_conceal_enumerations = 1
let hscoptions="𝐒𝐓𝐄𝐌xRtB𝔻"

"Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
augroup haskell
  autocmd!
  autocmd FileType haskell map <silent> <leader><cr> :noh<cr>:GhcModTypeClear<cr>:SyntasticReset<cr>
  autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
augroup END

"         Haskell > tagbar
let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }
" Generate haskell tags with codex and hscope
map <leader>tg :!codex update --force<CR>:call system("git hscope -X TemplateHaskell")<CR><CR>:call LoadHscope()<CR>

" Delete trailing white space on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

augroup whitespace
  autocmd!
  autocmd BufWrite *.hs :call DeleteTrailingWS()
augroup END

" Enable some tabular presets for Haskell
let g:haskell_tabular = 1

set csprg=~/.vim/haskell-vim-now/bin/hscope
set csto=1 " search codex tags first
set cst
set csverb
nnoremap <silent> <C-\> :cs find c <C-R>=expand("<cword>")<CR><CR>
" Automatically make cscope connections
function! LoadHscope()
  let db = findfile("hscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/hscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
au BufEnter /*.hs call LoadHscope()

set completeopt+=longest

" Use buffer words as default tab completion
let g:SuperTabDefaultCompletionType = '<c-x><c-p>'

" But provide (neco-ghc) omnicompletion
if has("gui_running")
  imap <c-space> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
else " no gui
  if has("unix")
    inoremap <Nul> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
  endif
endif

" Show types in completion suggestions
let g:necoghc_enable_detailed_browse = 1

" Type of expression under cursor
nmap <silent> <leader>ht :GhcModType<CR>
" Insert type of expression under cursor
nmap <silent> <leader>hT :GhcModTypeInsert<CR>
" GHC errors and warnings
"nmap <silent> <leader>hc :SyntasticCheck hdevtools<CR>
nmap <silent> <leader>hc :GhcModCheck<CR>
" Haskell Lint
nmap <silent> <leader>hl :SyntasticCheck hlint<CR>
" Hoogle the word under the cursor
nnoremap <silent> <leader>hh :Hoogle<CR>
" Hoogle and prompt for input
nnoremap <leader>hH :Hoogle 
" Hoogle for detailed documentation (e.g. "Functor")
nnoremap <silent> <leader>hi :HoogleInfo<CR>
" Hoogle for detailed documentation and prompt for input
nnoremap <leader>hI :HoogleInfo 
" Hoogle, close the Hoogle window
nnoremap <silent> <leader>hz :HoogleClose<CR>

" Haskell conversions
function! Pointfree()
  call setline('.', split(system('pointfree '.shellescape(join(getline(a:firstline, a:lastline), "\n"))), "\n"))
endfunction
vnoremap <silent> <leader>h. :call Pointfree()<CR>

function! Pointful()
  call setline('.', split(system('pointful '.shellescape(join(getline(a:firstline, a:lastline), "\n"))), "\n"))
endfunction
vnoremap <silent> <leader>h> :call Pointful()<CR>

" Use phpcd with deoplete
" let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
" let g:deoplete#ignore_sources.php = ['omni']

"Syntax highlighting for CakePHP thtml and ctp files
au BufNewFile,BufRead *.thtml setfiletype php
au BufNewFile,BufRead *.ctp setfiletype php
"Syntax highlighting for javascript processing templates
au BufNewFile,BufRead *.pjs setfiletype javascript
"Syntax highlighting for embeded elixir templates (similar to .erb)
au BufNewFile,BufRead *.eex setfiletype eruby

" Navigation dans la librairie python
" Penser à executer ctags -R -f ~/.vim/tags/python.ctags /usr/lib/python2.5/
set tags+=$HOME/.vim/tags/python.ctags
" Complétion pour python
autocmd FileType python set omnifunc=pythoncomplete#Complete

" Return to last edit position when opening files (You want this!)
augroup last_edit
  autocmd!
  autocmd BufReadPost *
       \ if line("'\"") > 0 && line("'\"") <= line("$") |
       \   exe "normal! g`\"" |
       \ endif
augroup END
set viminfo^=% " Remember info about open buffers on close

" Stop Align plugin from forcing its mappings on us
let g:loaded_AlignMapsPlugin=1

" Tabulation
set expandtab       " Use spaces instead of tabs
set shiftwidth=2
set tabstop=2
" set tabstop=4       " Display \t as 4 spaces
" set shiftwidth=4    " Number of spaces to use for each indent
" set softtabstop=4   " Treat 4 spaces as a tab for editing purposes
autocmd Filetype python setlocal ts=4 sts=4 sw=4
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype php setlocal ts=4 sts=4 sw=4
"       shortcuts
if exists(":Tabularize")
        nmap <Leader>a= :Tabularize /=<CR>
        vmap <Leader>a= :Tabularize /=<CR>
        nmap <Leader>a: :Tabularize /:\zs<CR>
        vmap <Leader>a: :Tabularize /:\zs<CR>
endif
"       auto tabulate |
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
"end tabulation

" fix E764 AutoComplPop error message when editing html files
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags noci
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags noci
" accès à la complétion par CTRL+Space au lieu de CTRL+X,CTRL+O
inoremap <C-space> <C-x><C-o>

set foldmethod=indent
"unfolded by default
"au BufWinEnter * normal zR 
set nofoldenable

" this is for python, put
" # name for the folded text # {{{
" to begin marker and
" # }}}
" close to end it.
set commentstring=\ #\ %s

"Disable Alt key for accessing menu (conflict with yankstack Alt+P shortcut)
set winaltkeys=no 

set clipboard^=unnamed,unnamedplus "sync the last copy register with the system clipboard 

"Place temporary files in a specified directory instead of in the current
"directory
set backup " tell vim to keep backup files
set backupdir=/tmp " tell vim where to put its backup files
set dir=/tmp " tell vim where to put swap files

set wildmode=list:longest,full
syntax on
set number

" Show file encoding in the status line
if has("statusline")
 "git branch in status line
 set statusline=%<%f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P
endif

"Easy vimrc editing 
nnoremap <leader>ev :vsplit $HOME/.vim/vimrc<cr>
nnoremap <leader>sv :source $HOME/.vim/vimrc<cr>

"ESC remap
inoremap kj <esc>
inoremap KJ <esc>
inoremap jk <esc>
inoremap JK <esc>
"inoremap <esc> <nop>

"move one single row on the screen 
nnoremap j gj
nnoremap k gk

"Disable Ex mode
nnoremap Q <nop>

" ,cd => change directory to the file being edited
nnoremap ,cd :cd %:p:h<CR>:pwd<CR> 

nnoremap <leader>u :UndotreeToggle<cr>

" exit neovim terminal
tnoremap <Esc> <C-\><C-n>

"XXX F2-F11 : vdebug
" à réattribuer : 
" F2 : File explorer
" noremap <silent> <F2> :NERDTreeToggle<CR>
" F3 : buffers
" noremap <silent> <F3> :Buffers<CR>
" F4 : copy registers
" noremap <silent> <F4> :reg<CR>
" F5 : undo tree
" noremap <silent> <F5> :UndotreeToggle<CR>
" F6 : git blame
" noremap <silent> <F6> :Gblame<CR>
" F7 : git history for current file 
" noremap <silent> <F7> :GV?<CR>
" F9 : class / functions / variables explorer
" noremap <silent> <F9> :TagbarToggle<CR>


" ignore case when searching
set ignorecase
" choose correct case on autocompletion
set infercase
" if there is a capital in the search term, don't ignore case
set smartcase

" vim-airline
let g:airline_powerline_fonts = 1
set noshowmode "because insert/normal modes are already shown by vim-airline
let g:airline_left_sep='' " default : >
let g:airline_right_sep='' " default : <
" let g:airline_theme='one'

"Powerline
" Don't forget to config this same font on the terminal emulator to get it
" working with console vim
set guifont=DejaVuSansMono\ Nerd\ Font\ 10 

" Snippets
nnoremap <leader>dt "=strftime("%Y-%m-%d %H:%M:%S")<CR>P

let g:languagetool_jar= '/usr/local/LanguageTool/LanguageTool.jar'

" Viki
let g:vikiNameSuffix=".viki"
autocmd! BufRead,BufNewFile $HOME/viki/* set filetype=viki
let g:vikiHomePage =$HOME . "/viki/home"

" VimOrganizer
au BufNewFile,BufRead *.org	set filetype=org
let g:org_command_for_emacsclient='emacsclient'

set mouse=a "Activate mouse on console mode
